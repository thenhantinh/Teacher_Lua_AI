import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai

# C·∫•u h√¨nh
TELEGRAM_BOT_TOKEN = "7673124677:AAHi0GxG8xkEjBGZQBB22JHXdJwqudkOj9o"
OPENAI_API_KEY = "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"

# Kh·ªüi t·∫°o OpenAI
openai.api_key = OPENAI_API_KEY

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# H√†m x·ª≠ l√Ω tin nh·∫Øn AI
async def generate_ai_response(message_text):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªØu √≠ch."},
                {"role": "user", "content": message_text}
            ],
            max_tokens=150,
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë: {str(e)}"

# Command handlers
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI. H√£y chat v·ªõi t√¥i!"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
C√°c l·ªánh c√≥ s·∫µn:
/start - B·∫Øt ƒë·∫ßu
/help - Tr·ª£ gi√∫p
/info - Th√¥ng tin v·ªÅ bot
    """
    await update.message.reply_text(help_text)

# X·ª≠ l√Ω tin nh·∫Øn
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type = update.message.chat.type
    text = update.message.text

    # Ch·ªâ ph·∫£n h·ªìi trong nh√≥m khi ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ho·∫∑c tin nh·∫Øn ri√™ng
    if message_type == 'group' or message_type == 'supergroup':
        if context.bot.username in text or update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id:
            # Lo·∫°i b·ªè username kh·ªèi tin nh·∫Øn
            if context.bot.username in text:
                text = text.replace(f"@{context.bot.username}", "").strip()
            
            # T·∫°o ph·∫£n h·ªìi AI
            response = await generate_ai_response(text)
            await update.message.reply_text(response)
    else:  # Tin nh·∫Øn ri√™ng
        response = await generate_ai_response(text)
        await update.message.reply_text(response)

# X·ª≠ l√Ω l·ªói
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Update {update} caused error {context.error}")

# H√†m ch√≠nh
def main():
    # T·∫°o ·ª©ng d·ª•ng
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Th√™m handlers
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # X·ª≠ l√Ω l·ªói
    app.add_error_handler(error)

    # Kh·ªüi ƒë·ªông bot
    print("Bot ƒëang ch·∫°y...")
    app.run_polling(poll_interval=3)

if __name__ == "__main__":
    main()from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from openai import OpenAI

# --- Th√¥ng tin c·∫•u h√¨nh ---
TELEGRAM_TOKEN = "7673124677:AAHi0GxG8xkEjBGZQBB22JHXdJwqudkOj9o"
OPENAI_API_KEY = "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"

client = OpenAI(api_key=OPENAI_API_KEY)

# --- H√†m x·ª≠ l√Ω tin nh·∫Øn ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = update.message.chat_id

    # G·ª≠i y√™u c·∫ßu ƒë·∫øn OpenAI
    response = client.chat.completions.create(
        model="gpt-4o-mini",  # ho·∫∑c "gpt-4", "gpt-5" khi c√≥
        messages=[
            {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh, n√≥i chuy·ªán t·ª± nhi√™n v√† th√¢n thi·ªán."},
            {"role": "user", "content": user_message}
        ]
    )

    answer = response.choices[0].message.content
    await update.message.reply_text(answer)

# --- Ch·∫°y bot ---
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
print("ü§ñ Bot ƒëang ch·∫°y...")
app.run_polling()
